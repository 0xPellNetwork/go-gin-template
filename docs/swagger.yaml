basePath: /api/v1
definitions:
  middleware.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  models.CreateUserRequest:
    properties:
      age:
        maximum: 150
        minimum: 1
        type: integer
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - email
    - name
    type: object
  models.UpdateUserRequest:
    properties:
      age:
        maximum: 150
        minimum: 1
        type: integer
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.User:
    properties:
      age:
        maximum: 150
        minimum: 1
        type: integer
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    required:
    - email
    - name
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A clean and modern Go API template with Gin, GORM, and smart parameter
    binding
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Gin Template API
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/middleware.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/middleware.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/middleware.Response'
      summary: Get users list
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/middleware.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/middleware.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/middleware.Response'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/middleware.Response'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/middleware.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/middleware.Response'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            allOf:
            - $ref: '#/definitions/middleware.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/middleware.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/middleware.Response'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user with the provided information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/middleware.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/middleware.Response'
      summary: Update user
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
